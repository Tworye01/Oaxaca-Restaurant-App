definitions:
  models.Basket:
    properties:
      items:
        items:
          $ref: '#/definitions/models.BasketItem'
        type: array
    type: object
  models.BasketItem:
    properties:
      id:
        type: integer
      itemId:
        type: integer
      note:
        type: string
    type: object
  models.Credentials:
    properties:
      password:
        type: string
      role:
        $ref: '#/definitions/models.Role'
      username:
        type: string
    type: object
  models.Dish:
    type: object
  models.Drink:
    type: object
  models.Order:
    type: object
  models.Role:
    enum:
    - 0
    - 1
    - 2
    - 3
    - 4
    type: integer
    x-enum-comments:
      Admin: "4"
      Customer: "0"
      Kitchen: "2"
      Manager: "3"
      Waiter: "1"
    x-enum-varnames:
    - Customer
    - Waiter
    - Kitchen
    - Manager
    - Admin
info:
  contact: {}
paths:
  /api/v1/baskets/items/:
    post:
      description: Gets data from the request body and item information from the database,
        calculates the total cost, and returns the basket items
      parameters:
      - description: JSON object representing the basket
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.Basket'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: Adds items to basket
      tags:
      - basket
  /api/v1/baskets/pay/{table}:
    post:
      description: Gets item information from basket and table number, calculates
        total cost, adds orders & bill to database
      parameters:
      - description: JSON object representing the basket
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.Basket'
      - description: table number
        in: path
        name: table
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: Posts table's bill based on basket
      tags:
      - basket
  /api/v1/bill/orders/{id}:
    get:
      description: Returns a status, depending on if the Bill and Orders were successfully
        fetched
      parameters:
      - description: id of the bill
        format: int
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Gets a bill and its orders
      tags:
      - bill
  /api/v1/bills:
    patch:
      description: Returns a status, depending on if the bill was updated successfully
        or not
      parameters:
      - description: JSON object of an order to be updated
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.Order'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
      summary: Patches a bill
      tags:
      - bill
  /api/v1/bills/{id}:
    get:
      description: Returns a status, depending on if the bill was retrieved successfully
        or not
      parameters:
      - description: id of the bill
        format: int
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: Gets bill from its id
      tags:
      - bill
  /api/v1/dishes:
    put:
      description: Puts an dish, if it does not exist it is added otherwise it updates
        the order of the same ID
      parameters:
      - description: JSON object of an order to be added or updated
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.Dish'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Put a dish
      tags:
      - dishes
  /api/v1/health:
    get:
      description: Returns the status of the middleware
      produces:
      - text/plain
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get the health
      tags:
      - health
  /api/v1/login:
    post:
      description: Logs user in if valid login details are given and returns a login
        token.
      parameters:
      - description: user's login details
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.Credentials'
      produces:
      - text/plain
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "561":
          description: ""
      summary: Authenticates user
      tags:
      - login
  /api/v1/login/credentials:
    patch:
      description: Updates user based on their credentials
      parameters:
      - description: user details
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.Credentials'
      produces:
      - text/plain
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
      summary: Updates a user
      tags:
      - user
  /api/v1/login/credentials/:
    post:
      description: Posts a user into the database
      parameters:
      - description: user details
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.Credentials'
      produces:
      - text/plain
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
      summary: Posts a user
      tags:
      - user
  /api/v1/login/credentials/{user}:
    delete:
      description: Deletes the user via their username
      parameters:
      - description: username
        in: path
        name: user
        required: true
        type: integer
      produces:
      - text/plain
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
      summary: Deletes a user
      tags:
      - user
  /api/v1/login/credentials/{username}:
    get:
      description: Returns the user based on their username
      parameters:
      - description: username
        in: path
        name: username
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "500":
          description: Internal Server Error
      summary: Gets a user
      tags:
      - user
  /api/v1/menu:
    get:
      description: Returns all the Dishes and Drinks, regardless of availability
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
      summary: Get the entire Menu
      tags:
      - menu
  /api/v1/menu/dishes:
    patch:
      description: Updates the dish on the ID
      parameters:
      - description: JSON object of an order to be added or updated
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.Dish'
      produces:
      - text/plain
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Updates a dish
      tags:
      - dishes
  /api/v1/menu/dishes/:
    get:
      description: Returns the json of all dishes
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Lists all the dishes
      tags:
      - dishes
    post:
      description: Posts a dish into the database
      parameters:
      - description: JSON object of an order to be added or updated
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.Dish'
      produces:
      - text/plain
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Posts a dish
      tags:
      - dishes
  /api/v1/menu/dishes/{id}:
    delete:
      description: Deletes the dish on the ID
      parameters:
      - description: ID of the dish
        in: path
        name: id
        required: true
        type: integer
      produces:
      - text/plain
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Deletes a dish
      tags:
      - dishes
    get:
      description: Returns the dish based on its ID
      parameters:
      - description: ID of the dish
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Gets a dish
      tags:
      - dishes
  /api/v1/menu/dishes/query:
    get:
      description: Goes to the image/menu/... directory and sends the file.
      parameters:
      - description: spice
        in: path
        name: query
        required: true
        type: integer
      - description: course
        in: path
        name: query
        required: true
        type: integer
      - description: allergens
        in: path
        name: query
        required: true
        type: string
      - description: calories
        in: path
        name: query
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Get the static images for the file directory
      tags:
      - filter
  /api/v1/menu/drinks:
    get:
      description: Returns the json of drinks
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Lists all the drinks
      tags:
      - drinks
    post:
      description: Added a drink to the database regardless if it alread exists or
        not
      parameters:
      - description: JSON object of an order to be added or updated
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.Drink'
      produces:
      - text/plain
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Posts a drink
      tags:
      - drinks
    put:
      description: Puts an drink, if it does not exist it is added otherwise it updates
        the order of the same ID
      parameters:
      - description: JSON object of an order to be added or updated
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.Drink'
      produces:
      - text/plain
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Put a drink
      tags:
      - drinks
  /api/v1/menu/drinks.{id}:
    put:
      description: Gets a drink, using the primary key
      parameters:
      - description: ID of the dish
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Gets a drink
      tags:
      - drinks
  /api/v1/menu/drinks/{id}:
    delete:
      description: Deletes a drink using it's ID
      parameters:
      - description: ID of the dish
        in: path
        name: id
        required: true
        type: integer
      produces:
      - text/plain
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Deletes a drink
      tags:
      - drinks
    patch:
      description: Updates the drink at the certain ID
      parameters:
      - description: JSON object of an order to be added or updated
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.Drink'
      produces:
      - text/plain
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Updates a drink
      tags:
      - drinks
  /api/v1/order/{table}:
    get:
      description: Creates a customer and assigns them to a table
      parameters:
      - description: table number
        in: path
        name: table
        required: true
        type: integer
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Creates a customer
      tags:
      - websocket
  /api/v1/orders:
    get:
      description: Returns a JSON object of all orders
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: Get a list of all orders
      tags:
      - order
    patch:
      description: Updates the data of a currently existing order
      parameters:
      - description: JSON object of an order to be updated
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.Order'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Patch an order
      tags:
      - order
    post:
      description: Adds an order if it does not already exist in the orders
      parameters:
      - description: JSON object of an order to be added
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.Order'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Post an order
      tags:
      - order
    put:
      description: Puts an order, if it does not exist it is added otherwise it updates
        the order of the same ID
      parameters:
      - description: JSON object of an order to be added or updated
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.Order'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
      summary: Put an order
      tags:
      - order
  /api/v1/orders/{id}:
    delete:
      description: Returns a status, depending on if the Order was deleted successfully
        or not
      parameters:
      - description: id of the order
        format: int
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Delete a specific order
      tags:
      - order
    get:
      description: Returns a JSON object of the order of the given ID
      parameters:
      - description: id of the order
        format: int
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: Get a specific order
      tags:
      - order
  /api/v1/orders/{id}/{status}:
    patch:
      description: Returns the status of the given order ID
      parameters:
      - description: id of the order
        format: int
        in: path
        name: id
        required: true
        type: integer
      - description: status of the order
        format: int
        in: path
        name: status
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Updates the status of a specific order
      tags:
      - order
  /api/v1/orders/{id}/status:
    get:
      description: Returns the status of the given order ID
      parameters:
      - description: id of the order
        format: int
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
      summary: Get the status of a specific order
      tags:
      - order
  /api/v1/staff/{table}:
    get:
      description: Creates a waiter and assigns them to a table
      parameters:
      - description: table number
        in: path
        name: table
        required: true
        type: integer
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Creates a waiter
      tags:
      - websocket
  /api/v1/staff/manager:
    get:
      description: Creates a manager and assigns them to all tables
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Creates a manager
      tags:
      - websocket
  /api/v1/table/bills/{table}:
    get:
      description: Fetches the bill for specific table number and returns it.
      parameters:
      - description: table number
        format: int
        in: path
        name: table
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: Gets bill for a specific table
      tags:
      - table
  /api/v1/table/orders/{table}:
    get:
      description: Fetches the orders for specific table number and returns them.
      parameters:
      - description: table number
        format: int
        in: path
        name: table
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
      summary: Gets orders for a specific table
      tags:
      - table
  /images/{dir}/{file}:
    get:
      description: Goes to the image/menu/... directory and sends the file.
      parameters:
      - description: dishes or drinks
        format: string
        in: path
        name: dir
        required: true
        type: string
      - description: name of the file
        format: string
        in: path
        name: file
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
      summary: Get the static images for the file directory
      tags:
      - image
    post:
      description: Takes the file and saves it into the path
      parameters:
      - description: dishes or drinks
        format: string
        in: path
        name: dir
        required: true
        type: string
      - description: name of the file
        format: string
        in: path
        name: file
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
      summary: Posts the image into the file directory
      tags:
      - image
swagger: "2.0"
